package dev.orlyata.pinebobr;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VALUES".
*/
public class ValueDao extends AbstractDao<Value, Long> {

    public static final String TABLENAME = "VALUES";

    /**
     * Properties of entity Value.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Types = new Property(1, String.class, "types", false, "TYPES");
        public final static Property Values = new Property(2, String.class, "values", false, "VALUES");
        public final static Property Timestamp = new Property(3, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property Val = new Property(4, int.class, "val", false, "VAL");
    }

    private DaoSession daoSession;


    public ValueDao(DaoConfig config) {
        super(config);
    }
    
    public ValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VALUES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPES\" TEXT," + // 1: types
                "\"VALUES\" TEXT," + // 2: values
                "\"TIMESTAMP\" TEXT NOT NULL ," + // 3: timestamp
                "\"VAL\" INTEGER NOT NULL );"); // 4: val
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VALUES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Value entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String types = entity.getTypes();
        if (types != null) {
            stmt.bindString(2, types);
        }
 
        String values = entity.getValues();
        if (values != null) {
            stmt.bindString(3, values);
        }
        stmt.bindString(4, entity.getTimestamp());
        stmt.bindLong(5, entity.getVal());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Value entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String types = entity.getTypes();
        if (types != null) {
            stmt.bindString(2, types);
        }
 
        String values = entity.getValues();
        if (values != null) {
            stmt.bindString(3, values);
        }
        stmt.bindString(4, entity.getTimestamp());
        stmt.bindLong(5, entity.getVal());
    }

    @Override
    protected final void attachEntity(Value entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Value readEntity(Cursor cursor, int offset) {
        Value entity = new Value( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // types
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // values
            cursor.getString(offset + 3), // timestamp
            cursor.getInt(offset + 4) // val
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Value entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypes(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValues(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimestamp(cursor.getString(offset + 3));
        entity.setVal(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Value entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Value entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Value entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
